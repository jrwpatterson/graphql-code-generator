"use strict";(self.webpackChunk_graphql_codegen_website=self.webpackChunk_graphql_codegen_website||[]).push([[1134],{35318:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(27378);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(t),m=a,d=c["".concat(s,".").concat(m)]||c[m]||g[m]||o;return t?r.createElement(d,i(i({ref:n},u),{},{components:t})):r.createElement(d,i({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},40707:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return c}});var r=t(25773),a=t(30808),o=(t(27378),t(35318)),i=["components"],l={id:"gql-tag-operations",title:"gql-tag-operations"},s=void 0,p={unversionedId:"presets/gql-tag-operations",id:"presets/gql-tag-operations",isDocsHomePage:!1,title:"gql-tag-operations",description:"This preset generates typings for your inline gql function usages, without having to manually specify import statements for the documents. All you need to do is import your gql function and run codegen in watch mode.",source:"@site/docs/presets/gql-tag-operations.md",sourceDirName:"presets",slug:"/presets/gql-tag-operations",permalink:"/docs/presets/gql-tag-operations",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/presets/gql-tag-operations.md",tags:[],version:"current",frontMatter:{id:"gql-tag-operations",title:"gql-tag-operations"},sidebar:"sidebar",previous:{title:"All Presets",permalink:"/docs/presets/presets-index"},next:{title:"near-operation-file",permalink:"/docs/presets/near-operation-file"}},u=[{value:"Getting Started",id:"getting-started",children:[]},{value:"Improving bundle-size with the gql-tag-operations babel plugin",id:"improving-bundle-size-with-the-gql-tag-operations-babel-plugin",children:[]},{value:"Using module augmentation for using an existing <code>gql</code> function from a library",id:"using-module-augmentation-for-using-an-existing-gql-function-from-a-library",children:[]}],g={toc:u};function c(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This preset generates typings for your inline ",(0,o.kt)("inlineCode",{parentName:"p"},"gql")," function usages, without having to manually specify import statements for the documents. All you need to do is import your ",(0,o.kt)("inlineCode",{parentName:"p"},"gql")," function and run codegen in watch mode."),(0,o.kt)("p",null,"Huge thanks to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/arcanis"},"Ma\xebl Nison"),", who conceptualized the foundation for this preset ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/arcanis/graphql-typescript-integration"},"over here"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { gql } from '@app/gql';\n\n// TweetFragment is a fully typed document node\nconst TweetFragment = gql(/* GraphQL */ `\n  fragment TweetFragment on Tweet {\n    id\n    body\n  }\n`);\n\nconst TweetsQueryWithFragment = gql(/* GraphQL */ `\n  query TweetsWithFragmentQuery {\n    Tweets {\n      id\n      ...TweetFragment\n    }\n  }\n`);\n")),(0,o.kt)("p",null,(0,o.kt)("h2",{parentName:"p"},"Installation"),(0,o.kt)("img",{alt:"gql-tag-operations-preset plugin version",src:"https://img.shields.io/npm/v/@graphql-codegen/gql-tag-operations-preset?color=%23e15799&label=plugin\xa0version&style=for-the-badge"}),(0,o.kt)("div",{parentName:"p",className:"admonition admonition-shell"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16pt",height:"16pt",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",d:"M0 0v16h16V0zm15.063 15.063H.937v-11h14.126zm0-11.938H.937V.937h14.126zm0 0"}),(0,o.kt)("path",{parentName:"svg",d:"M1.875 1.563h.938V2.5h-.938zm0 0M3.438 1.563h.937V2.5h-.938zm0 0M5 1.563h.938V2.5H5zm0 0M1.875 5.074v1.348l.988.637-.988.578V9.05l2.828-1.668v-.586zm0 0M5.34 7.559h1.027v1.226H5.34zm0 0M5.34 5.32h1.027v1.23H5.34zm0 0M6.8 8.785h2.356v1.137H6.801zm0 0"}))),"Using ",(0,o.kt)("inlineCode",{parentName:"h5"},"yarn"))),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},"yarn add -D @graphql-codegen/gql-tag-operations-preset\n")))),(0,o.kt)("h2",{parentName:"p"},"API Reference"),(0,o.kt)("h3",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"h3"},"augmentedModuleName")),(0,o.kt)("p",{parentName:"p"},"type: ",(0,o.kt)("inlineCode",{parentName:"p"},"string")),(0,o.kt)("p",{parentName:"p"},"Instead of generating a ",(0,o.kt)("inlineCode",{parentName:"p"},"gql")," function, this preset can also generate a d.ts that will enhance the ",(0,o.kt)("inlineCode",{parentName:"p"},"gql")," function of your framework."),(0,o.kt)("p",{parentName:"p"},"E.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql-tag")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"@urql/core"),"."),(0,o.kt)("h4",{parentName:"p"},"Usage Examples"),(0,o.kt)("pre",{parentName:"p"},(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"generates:\ngql/:\n preset: gql-tag-operations-preset\n presetConfig:\n   augmentedModuleName: '@urql/core'\n\n"))),(0,o.kt)("h2",{id:"getting-started"},"Getting Started"),(0,o.kt)("p",null,"In order to use this preset, you need to add the following configuration to your ",(0,o.kt)("inlineCode",{parentName:"p"},"codegen.yml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"schema: src/path/to/your/schema.graphql\ndocuments:\n  - 'src/**/*.ts'\n  - '!src/gql/**/*'\ngenerates:\n  ./src/gql/:\n    preset: gql-tag-operations-preset\n")),(0,o.kt)("p",null,"It is also recommended, that you link ",(0,o.kt)("inlineCode",{parentName:"p"},"./src/gql")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"@app/gql"),", so you can import your gql function easily from anywhere within your app."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add -D @app/gql@link:./src/gql\n")),(0,o.kt)("p",null,"Now start your codegen in watch mode via ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn graphql-codegen --watch"),"."),(0,o.kt)("p",null,"Create a new file within your ",(0,o.kt)("inlineCode",{parentName:"p"},"src")," directory, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"./src/index.ts")," and add a query for your schema:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { gql } from '@app/gql';\n\n// TweetsQuery is a fully typed document node!\nconst TweetsQuery = gql(/* GraphQL */ `\n  query TweetsQuery {\n    Tweets {\n      id\n    }\n  }\n`);\n")),(0,o.kt)("p",null,"Next we can simply add our GraphQL client of choice and use the typed document! Let's try urql!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { gql } from '@app/gql';\nimport { useQuery } from 'urql';\n\n// TweetsQuery is a fully typed document node/\nconst TweetsQuery = gql(/* GraphQL */ `\n  query TweetsQuery {\n    Tweets {\n      id\n      body\n    }\n  }\n`);\n\nconst Tweets = () => {\n  const [result] = useQuery({ query: TweetsQuery });\n  const { data, fetching, error } = result;\n\n  if (fetching) return <p>Loading...</p>;\n  if (error) return <p>Oh no... {error.message}</p>;\n\n  return (\n    <ul>\n      {/* data is fully typed \ud83c\udf89 */}\n      {data.Tweets.map(tweet => (\n        <li key={tweet.id}>{tweet.body}</li>\n      ))}\n    </ul>\n  );\n};\n")),(0,o.kt)("p",null,"If we want to use fragments, we can use some utilities for accessing the fragment types:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { gql, DocumentType } from '../gql';\n\nconst TweetFragment = gql(/* GraphQL */ `\n  fragment TweetFragment on Tweet {\n    id\n    body\n  }\n`);\n\nconst Tweet = (props: {\n  /** tweet property has the correct type \ud83c\udf89 */\n  tweet: DocumentType<typeof TweetFragment>;\n}) => {\n  return <li data-id={props.id}>{props.body}</li>;\n};\n\nconst TweetsQuery = gql(/* GraphQL */ `\n  query TweetsQuery {\n    Tweets {\n      id\n      ...TweetFragment\n    }\n  }\n`);\n\nconst Tweets = () => {\n  const [result] = useQuery({ query: TweetsQuery });\n  const { data, fetching, error } = result;\n\n  if (fetching) return <p>Loading...</p>;\n  if (error) return <p>Oh no... {error.message}</p>;\n\n  return (\n    <ul>\n      {data.Tweets.map(tweet => (\n        <Tweet key={tweet.id} tweet={tweet} />\n      ))}\n    </ul>\n  );\n};\n")),(0,o.kt)("h2",{id:"improving-bundle-size-with-the-gql-tag-operations-babel-plugin"},"Improving bundle-size with the gql-tag-operations babel plugin"),(0,o.kt)("p",null,"Because the generated code output is a single ",(0,o.kt)("inlineCode",{parentName:"p"},"gql")," function that looks similar to the following code, code-splitting and tree-shaking is not easily possible."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import * as graphql from './graphql';\n\nconst documents = {\n  '\\n  query Foo {\\n    Tweets {\\n      id\\n    }\\n  }\\n': graphql.FooDocument,\n  '\\n  fragment Lel on Tweet {\\n    id\\n    body\\n  }\\n': graphql.LelFragmentDoc,\n  '\\n  query Bar {\\n    Tweets {\\n      ...Lel\\n    }\\n  }\\n': graphql.BarDocument,\n};\n\nexport function gql(\n  source: '\\n  query Foo {\\n    Tweets {\\n      id\\n    }\\n  }\\n'\n): typeof documents['\\n  query Foo {\\n    Tweets {\\n      id\\n    }\\n  }\\n'];\nexport function gql(\n  source: '\\n  fragment Lel on Tweet {\\n    id\\n    body\\n  }\\n'\n): typeof documents['\\n  fragment Lel on Tweet {\\n    id\\n    body\\n  }\\n'];\nexport function gql(\n  source: '\\n  query Bar {\\n    Tweets {\\n      ...Lel\\n    }\\n  }\\n'\n): typeof documents['\\n  query Bar {\\n    Tweets {\\n      ...Lel\\n    }\\n  }\\n'];\n\nexport function gql(source: string): unknown;\nexport function gql(source: string) {\n  // OH NO gql accesses the documents object, the bundler cannot make assumption over what is actually used at runtime :(\n  return (documents as any)[source] ?? {};\n}\n")),(0,o.kt)("p",null,"However, the ",(0,o.kt)("inlineCode",{parentName:"p"},"@graphql-codegen/gql-tag-operations-preset")," package ships with a babel plugin for rewriting the ",(0,o.kt)("inlineCode",{parentName:"p"},"gql")," usages to actual imports."),(0,o.kt)("p",null,"This is the code that you write:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { gql, DocumentType } from '../gql';\n\nconst TweetFragment = gql(/* GraphQL */ `\n  fragment TweetFragment on Tweet {\n    id\n    body\n  }\n`);\n")),(0,o.kt)("p",null,"This is the code after the babel transformation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { TweetFragmentDoc } from \\\\"./graphql\\\\";\n\nconst TweetFragment = TweetFragmentDoc\n')),(0,o.kt)("p",null,"This will result in much smaller bundles when you code-split parts of your code."),(0,o.kt)("p",null,"Applying the babel plugin is straight-forward:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},".babelrc.mjs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { babelPlugin } from '@graphql-codegen/gql-tag-operations-preset';\nexport default {\n  plugins: [\n    // your other plugins such as typescript syntax stripping etc.\n\n    // make sure the artifactDirectory is the same as your generates path within the codegen.yml\n    [babelPlugin, { artifactDirectory: './src/gql' }],\n  ],\n};\n")),(0,o.kt)("p",null,"Afterwards, you won't have to worry about bundle size anymore!"),(0,o.kt)("h2",{id:"using-module-augmentation-for-using-an-existing-gql-function-from-a-library"},"Using module augmentation for using an existing ",(0,o.kt)("inlineCode",{parentName:"h2"},"gql")," function from a library"),(0,o.kt)("p",null,"Sometimes the library you are using, let's use ",(0,o.kt)("inlineCode",{parentName:"p"},"urql")," for this example, already exposes a ",(0,o.kt)("inlineCode",{parentName:"p"},"gql")," function and instead of generating a new one you would prefer to just generate types that extend the type-definitions of that ",(0,o.kt)("inlineCode",{parentName:"p"},"gql")," function."),(0,o.kt)("p",null,"This can be easily achieved by running the ",(0,o.kt)("inlineCode",{parentName:"p"},"gql-tag-operations")," plugin in module augmentation mode!"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"codegen.yml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"schema: src/path/to/your/schema.graphql\ndocuments:\n  - 'src/**/*.ts'\n  - '!src/gql/**/*'\ngenerates:\n  src/gql/:\n    preset: gql-tag-operations-preset\n    presetConfig:\n      # define which module you want to import your gql function from\n      augmentedModuleName: '@urql/core'\n")),(0,o.kt)("p",null,"When the ",(0,o.kt)("inlineCode",{parentName:"p"},"augmentedModuleName")," option is configured instead of the ",(0,o.kt)("inlineCode",{parentName:"p"},"./src/gql/index.ts")," file a ",(0,o.kt)("inlineCode",{parentName:"p"},"./src/gql/index.d.ts")," file is generated."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"/* eslint-disable */\nimport { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';\n\ndeclare module '@urql/core' {\n  export function gql(\n    source: '\\n  query Bar {\\n    Tweets {\\n      ...Lel\\n    }\\n  }\\n'\n  ): typeof import('./graphql').BarDocument;\n  export function gql(source: string): unknown;\n}\n")),(0,o.kt)("p",null,"Now you can simply use your ",(0,o.kt)("inlineCode",{parentName:"p"},"gql")," function imported from ",(0,o.kt)("inlineCode",{parentName:"p"},"@url/core")," in your application code for having fully typed document nodes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { gql } from 'urql';\n\nconst FooQuery = gql(/* GraphQL */ `\n  query Foo {\n    Tweets {\n      id\n    }\n  }\n`);\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"NOTE"),": In case you are using fragments you MUST use the gql-tag-operations plugin as otherwise the ",(0,o.kt)("inlineCode",{parentName:"p"},"gql")," calls that reference global fragments will cause runtime errors, as the ",(0,o.kt)("inlineCode",{parentName:"p"},"gql")," operation cannot find the global fragment."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { gql } from 'urql';\n\n// This causes an error without the babel plugin\nconst FooQuery = gql(/* GraphQL */ `\n  query Foo {\n    Tweets {\n      ...SomeTweetFragment\n    }\n  }\n`);\n")))}c.isMDXComponent=!0}}]);